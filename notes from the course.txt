https://repl.it

====================================== Fizz Buzz ================================================
It will display orderly the a scale of numbers until the first one taken form the parameters

Divisible by 3: Fizz
Divisible by 5: Buzz
Disible for 3 and 5: FizzBuzz

Modulus Operator: %


function fizzBuzz(num) {
    for (let i = 1; i <= num; i++) {
        if(i % 15 === 0) console.log("Fizz Buzz");
        else if (i % 3 === 0)  console.log("Fizz");
        else if (i % 5 === 0)  console.log("Buzz");
        else console.log(i);
    }
}

fizzBuzz(20);

====================================== Harmless Ransom Note ================================================
function harmlessRansomNote(noteText, magazineText) {

}

Linear Time Complexity
O(n)+ O(m)
O(n + m)

Note: 'This is a note for you from  a secret admirer'

Magazine: 'puerto rico is a great place you must hike far from
town to find a secret waterfall that i am an admirer of but note
that it is not as hard as it seems this is my advice for you'

Big O Notation: it is a notation used to classify how scalable an algorithm or function is.

++++++++++"How much slower an algorithm will run if its input sites grows"++++++++++++

function harmlessRansomNote (noteText, magazineText) {
    var noteArr = noteText.split(' ');
    var magazineArr = magazineText.split(' ');
    var magazineObj = {};

    magazineArr.forEach(word => {
        if (!magazineObj[word]) magazineObj[word] = 0;
        magazineObj[word]++;
    });

    var noteIsPossible= true;
    noteArr.forEach(word=> {
        if (magazineObj[word]) {
            magazineObj[word]--;
            if (magazineObj[word] < 0) noteIsPossible = false;
        }
        else noteIsPossible = false;
    });

    return noteIsPossible;
}

harmlessRansomNote('this is a secret note for you from a secret admirer', 
'puerto rico is a place of great wonder and excitement it has many secret
 waterfall locatoins that i am an admirer of you must hike quite a distance 
 to find the secret places as they are far from populated areas but it is 
 worth the effort a tip i have for you is to go early in the morning when it 
 is not so hot out also note that you must wear hiking boots this is one of 
 the best places i have ever visited');

====================================== Is Palindrome ================================================
It is any word that is spelled the same backward and forward
ex: - racecar
    - Madam, I'm Adam

function isPalindrome(string) {
    string = string.toLowerCase();
    var characterArr = string.split('');
    var validCharacters = 'abcdefghijklmnopqrstuvwxyz'.split('');

    var letterArr = [];
    characterArr.forEach(char => {
        if (validCharacters.indexOf(char) > -1) letterArr.push(char); 
    });

    if (letterArr.join('') === letterArr.reverse().join('')) return true;
    else return false;
}

console.log(isPalindrome("Madam I'm Adam"));

====================================== Caesar Cipher ================================================
function caesarCipher (str, num) {
    //26: the length of the alphabet
    num = num % 26;//Result between 0 and 25 or -25 and 0
    var lowerCaseString = str.toLowerCase();
    var alphabet = 'abcdefghijklmnopqrstuvwxyz'.split('');
    var newString = '';

    for (var i = 0; i < lowerCaseString.length; i++) {
        var currentLetter = lowerCaseString[i];
        if (currentLetter === ' ') {
            newString += currentLetter;
            continue; //It goes to the next iteration
        }
        var currentIndex= alphabet.indexOf(currentLetter);
        var newIndex= currentIndex + num;
        if (newIndex > 25) newIndex = newIndex - 26;
        if (newIndex < 0) newIndex = 26 + newIndex;
        if (str[i] === str[i].toUpperCase()) {
            newString += alphabet[newIndex].toUpperCase();
        }
        else newString += alphabet[newIndex];
    }

    return newString;
}

caesarCipher('Zoo Keeper', 2); //Bqq Mggrgt
caesarCipher('Big Car', -16); //LsqMkb
caesarCipher('Javascript', -900); //Tkfkcmbszd

====================================== Reverse Words ================================================
function reverseWords(string) {
    //reverse every word in the string
    stringArr = string.split(' ');
    
    splitedString = [];
    stringArr.forEach(word => {
        splitedString.push(word);
    });
    console.log("splitedString", splitedString);

    //return the new string
}

Example 'this is a string of words'
Result 'sith si a gnirts fo sdrow'

Dont use the reverse method

/////////////////////////////(My Approach)/////////////////////////////////////////////////
function reverseWords(string) {
    //reverse every word in the string
    stringArr = string.split(' ');
    splitedString = [];

    stringArr.forEach(word => {
      splitedWord = word.split('');
      reversedWord = '';
      for (var i = splitedWord.length -1; i >= 0; i--) {
        reversedWord += splitedWord[i]
      }
      splitedString.push(reversedWord);
    });
    
    //return the new string
    return splitedString.join(' ');
}

console.log(reverseWords('this is a string of words'));

/////////////////////////////////(Course Approach)/////////////////////////////////////
function reverseWords(string) {
    var wordsArr = string.split(' ');
    var reverseWordsArr = [];

    wordsArr.forEach(word => {
        var reversedWord = '';
        for (var i = word.length - 1; i >= 0; i--) {
            reversedWord += word[i];
        }
        reverseWordsArr.push(reversedWord);
    });

    return reverseWordsArr.join(' ');

}

====================================== Reverse Array In Place ================================================
function reverseArrayInPlace(arr) {
    for (var i = 0; i < arr.length / 2; i++) {
        var tempVar = arr[i];
        arr[i] = arr[arr.length - 1 - i];
        arr[arr.length - 1 - i] = tempVar;
    }

    return arr;
}

reverseArrayInPlace(['a','b','c','d','e']);

* Be sure to manipulate the array passed in
* Do not push elements into a new array and return that array 
* Do not use array.reverse() method

====================================== Mean Median Mode ================================================
function meanMedianMode(array) {
    return {
        mean: getMean(array),
        median: getMedian(array),
        mode: getMode(array)
    };
}

function getMean(array) {
    var sum = 0;
    
    array.forEach(num => {
        sum +=num;
    });

    var mean = sum / array.length;
    return mean;
}

function getMedian(array) {
    //a - b (ascending order)
    array.sort(function(a, b) {return a -b});
    var median;

    //If the array length is dividable by 2
    if (array.length % 2 !== 0) {
        median = array[Math.floor(array.length / 2)];
    } else { //If it is not dividable by 2
        var mid1 = array[(array.length / 2) - 1];
        var mid2 = array[array.length / 2];
        median = (mid1 + mid2) / 2;
    } 

    return median;
}

function getMode(array) {
    var modeObj = {}; //This will be our hash table

    array.forEach(num => {
        if (!modeObj[num]) modeObj[num] = 0;
        modeObj[num]++;
    });

    var maxFrequency = 0; //How often the current mode shows up
    var mode = [];
    for (var num in modeObj) {
        if (modeObj[num] > maxFrequency) {
            modes = [num];
            maxFrequency= modeObj[num];
        }
        else if (modeObj[num] === maxFrequency) modes.push(num); 
    }

    if (modes.length === Object.keys(modeObj).length) modes = [];

    return modes;  
}

meanMedianMode([1,2,3,4,5,4,6,1]);


====================================== Two Sum ================================================
function twoSum(numArray, sum) {
    var pairs = [];
    var hashtable = [];

    for (var i = 0; i < numArray.length; i++ ) {
        var currNum = numArray[i];
        var counterpart = sum - currNum;
        if (hashtable.indexOf(counterpart) !== -1) {
            pairs.push([currNum, counterpart]);
        }
        hashtable.push(currNum);
    }

    return pairs;
}

console.log(twoSum([1, 6, 4, 5, 3, 3], 7));
console.log(twoSum([40, 11, 19, 17, -12], 28));

Example:
numArray: [1, 6, 4, 5, 3, 3]   sum = 7
result: [[6,1], [3,4], [3, 4]]

Guidelines:
1. Result sould be an array of arrays 
2. Any number in the numArray can be used in mutiple paris

====================================== BinarySearch ================================================
function binarySearch(numArray, key) {

}

- Search for a given value (key) inside of a list (numArray)
- Runs in O (log n) run time - very performant


What is Recursion ?
It has to call the same function into the code block

function func() {
    if (/*base case*/) {
        return something;
    } else { // recursive case
        func()
    }
}

+++++++++++++A recursive function will continue to call itself  until the base case is satisfied+++++++++++++++++++++

// Factorial (!)
// 4! = 4 * 3 * 2 * 1 = 24;
// 3! = 3 * 2 * 1;

function factorial(num) {
    if (num === 1) {
        return num;
    } else {
        return num * factorial(num - 1);
    }
}

factorial(4);

function binarySearch(numArray, key) {
    var middleIdx = Math.floor(numArray.length / 2);
    var middleElem = numArray[middleIdx];

    if (middleElem === key) return true;
    else if (middleElem < key && numArray.length > 1) {
        return binarySearch(numArray.splice(middleIdx, numArray.length), key);
    }
    else if (middleElem > key && numArray.length > 1) {
        return binarySearch(numArray.splice(0, middleIdx), key);
    }
    else return false; 
}

binarySearch([5, 7, 12, 16, 36, 39, 42, 56, 71], 56);

====================================== Fibonacci ================================================
function fibonacci(position) {
  if (position  < 3) return 1;
  else return fibonacci(position - 1) + fibonacci(position - 2);
}

fibonacci(10);

Hints:
1. does not require a lot of code - donÂ´t over-complicate it!
2. base case deals with the fact that the first two numbers are always 1 and 1

====================================== Memoized Fibonacci ================================================
function fibMemo(index, cache) {
    // index: index of number in fibonacci sequence
    // cache: an array used as memory
}

Memoization:
- Check to see if number already exists n cache
- If number is in cache, use that number
- If number is not n cache, calculate it and put it in a cache so it can be
  used multiple times in future

function fibMemo(index, cache) {
    cache = cache || [];
    if (cache[index]) return cache[index];
    else {
        if (index < 3) return 1;
        else {
            cache[index] = fibMemo(index - 1, cache) + fibMemo(index - 2, cache);
        }
    }

    return cache[index];
}

fibMemo(20);

====================================== Sieve of Eratosthenes=====================================
function sieveOfEratosthenes(num) {
    //return all primes numbers up
    //to num in an array
}

function sieveOfEratosthenes(n) {
    var primes = [];
    for (var i = 0; i <= n; i++) {
        primes[i] = true;
    }

    primes[0] = false; // 0 and 1 are not primes by default
    primes[1] = false;

    for (var i = 2; i <= Math.sqrt(n); i++) {
        for (var j = 2; j * i <= n; j++) {
            primes[i * j] = false;
        }
    }

    var result = [];
    for (var i = 0; i < primes.length; i++) {
        if (primes[i]) result.push(i);
    }

    return result;

}


====================================== Bubble Sort =====================================
function bubbleSort(array) {
    //return array, sorted with bubble sort
}

function bubbleSort(array) {
    for (var i = array.length; i > 0; i--) {
        for (var j = 0; j < i; j++) {
            if (array[j] > array[j + 1]) {
                var temp = array[j];
                array[j] = array[j + 1];
                array[j + 1] = temp;
            }
        } 
    }
    return array;
}

bubbleSort([5, 3, 8, 2, 1, 4]);

====================================== Merge Sort =====================================
function mergeSort(arr) {
    // take in a single, unsorted array as a parameter
    // split the array into two halves 
}

function merger(array1, array2) {
    // takes in two sorted arrays as parameters
    // merges those sorted arrays into one sorted array
    // returns one sorted array
}

-----------------------------------------------------------------
function mergeSort(arr) {
    if (arr.length < 2) return arr;
    var middleIndex = Math.floor(arr.length / 2);
    var firstHalf = arr.slice(0, middleIndex);
    var secondHalf = arr.slice(middleIndex);

    return merge(mergeSort(firstHalf), mergeSort(secondHalf));
}

function merge (array1, array2) {
    var result = [];
    while (array1.length && array2.length) {
        var minElem;
        //The shift method taked the first element of the array at the same time that is removed from the array itself;
        if (array1[0] < array2[0]) minElem = array1.shift();
        else minElem = array2.shift();
        result.push(minElem);
    }

    if (array1.length) result = result.concat(array1);
    else result = result.concat(array2);

    return result;
}

mergeSort([6000, 34, 203, 3, 746, 200, 984, 198, 764, 1, 9, 1]);


====================================== Max Stock Profit =====================================
function maxStockProfit(pricesArr) {
    // takes in array of prices as parameter
    // returns the max possible profit of the day
}

function maxStockProfit(pricesArr) {
    var maxProfit = -1;
    var buyPrice = 0;
    var sellPrice = 0;

    var changeBuyPrice = true;

    for (var i = 0; i < pricesArr.length; i++) {
        if (changeBuyPrice) buyPrice = pricesArr[i];
        sellPrice = pricesArr[i + 1];

        if (sellPrice< buyPrice) {
            changeBuyPrice = true;
        }
        else {
            var tempProfit = sellPrice - buyPrice;
            if (tempProfit > maxProfit) maxProfit = tempProfit; 
            changeBuyPrice = false;
        } 
    }

    return maxProfit;
}

maxStockProfit([32, 46, 26, 38, 40, 48, 42]);
maxStockProfit([10, 18, 4, 5, 9, 6, 16, 12]);